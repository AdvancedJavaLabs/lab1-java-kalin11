package org.itmo;

import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.Callable;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.stream.Collectors;

public class Graph {
    private static final int NON_VISITED = 0;
    private static final int VISITED = 1;

    private final int verticesCount;
    private final List<Integer>[] adjList;

    public Graph(int vertices) {
        this.verticesCount = vertices;
        adjList = new ArrayList[vertices];

        for (int i = 0; i < vertices; ++i) {
            adjList[i] = new ArrayList<>();
        }
    }

    public void addEdge(int src, int dest) {
        if (!adjList[src].contains(dest)) {
            adjList[src].add(dest);
        }
    }

    public void parallelBFS(int startVertex, int threadsCount) {
        // it's more effective than List<AtomicBoolean> that I've used before
        AtomicIntegerArray visited = new AtomicIntegerArray(verticesCount);

        if (!visited.compareAndSet(startVertex, NON_VISITED, VISITED)) {
            return;
        }

        Queue<Integer> currentLevel = new ConcurrentLinkedQueue<>();
        currentLevel.add(startVertex);

        ExecutorService executorService = Executors.newFixedThreadPool(threadsCount);

        try {
            while (!currentLevel.isEmpty()) {
                Queue<Integer> nextLevel = new ConcurrentLinkedQueue<>();

                CountDownLatch countDownLatch = new CountDownLatch(threadsCount);
                Queue<Integer> currentLevelCopy = currentLevel;

                for (int i = 0; i < threadsCount; i++) {
                    executorService.execute(() -> {
                        while (true) {
                            Integer vertex = currentLevelCopy.poll();
                            if (vertex == null) {
                                break;
                            }

                            markVertexAsVisited(vertex, visited, nextLevel);
                        }

                        countDownLatch.countDown();
                    });
                }

                try {
                    countDownLatch.await();
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }

                currentLevel = nextLevel;
            }
        } finally {
            executorService.shutdown();
        }
    }

    public void markVertexAsVisited(
            Integer vertex,
            AtomicIntegerArray visited,
            final Queue<Integer> nextLevel
    ) {
        for (int neighbor : adjList[vertex]) {
            if (visited.compareAndSet(neighbor, NON_VISITED, VISITED)) {
                nextLevel.add(neighbor);
            }
        }
    }

    //Generated by ChatGPT
    public void bfs(int startVertex) {
        boolean[] visited = new boolean[verticesCount];

        LinkedList<Integer> queue = new LinkedList<>();

        visited[startVertex] = true;
        queue.add(startVertex);

        while (!queue.isEmpty()) {
            startVertex = queue.poll();

            for (int n : adjList[startVertex]) {
                if (!visited[n]) {
                    visited[n] = true;
                    queue.add(n);
                }
            }
        }
    }
}
